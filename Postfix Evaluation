#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100 

struct Stack {
    int arr[MAX];
    int top;
};

void initializeStack(struct Stack *stack) {
    stack->top = -1;
}

int isFull(struct Stack *stack) {
    return stack->top == MAX - 1;
}

int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow!\n");
    } else {
        stack->arr[++stack->top] = value;
    }
}

int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow!\n");
        return -1;
    } else {
        return stack->arr[stack->top--];
    }
}

int performOperation(int operand1, int operand2, char operator) {
    switch (operator) {
        case '+': return operand1 + operand2;
        case '-': return operand1 - operand2;
        case '*': return operand1 * operand2;
        case '/': return operand1 / operand2;
        default: return 0;
    }
}

int evaluatePostfix(char *exp) {
    struct Stack stack;
    initializeStack(&stack);
    
    for (int i = 0; exp[i] != '\0'; i++) {
        char ch = exp[i];
        if (isdigit(ch)) {
            push(&stack, ch - '0');
        } 
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result = performOperation(operand1, operand2, ch);
            push(&stack, result);
        }
    }
    return pop(&stack);
}

int main() {
    char exp[MAX];

    printf("Enter a postfix expression: ");
    fgets(exp, MAX, stdin);
    int result = evaluatePostfix(exp);
    printf("Result of postfix evaluation: %d\n", result);

    return 0;
}
