#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
int data;
struct Node* next;
} Node;

Node* createNode(int data) {
Node* newNode = (Node*)malloc(sizeof(Node));
if (!newNode) {
printf("Memory allocation failed.\n");
exit(1);
}
newNode->data = data;
newNode->next = NULL;
return newNode;
}

is empty
int isEmpty(Node* top) {
return top == NULL;
}

void push(Node** top, int data) {
Node* newNode = createNode(data);
newNode->next = *top;
*top = newNode;
printf("Pushed %d onto the stack.\n", data);
}

int pop(Node** top) {
if (isEmpty(top)) {
printf("Stack underflow. Cannot pop.\n");
return -1;
}
Node temp = *top;
int poppedData = temp->data;
*top = (*top)->next;
free(temp);
return poppedData;
}

int peek(Node* top) {
if (isEmpty(top)) {
printf("Stack is empty.\n");
return -1;
}
return top->data;
}

void display(Node* top) {
if (isEmpty(top)) {
printf("Stack is empty.\n");
return;
}
printf("Stack elements:\n");
Node* current = top;
while (current) {
printf("%d\n", current->data);
current = current->next;
}
}

int main() {
Node* stack = NULL;

push(&stack, 10);
push(&stack, 20);
push(&stack, 30);

printf("Top element: %d\n", peek(stack));

printf("Popped element: %d\n", pop(&stack));
printf("Popped element: %d\n", pop(&stack));

display(stack);

printf("Popped element: %d\n", pop(&stack));
printf("Popped element: %d\n", pop(&stack)); 
return 0;
}
